/// <reference types="cypress" />
var registerQuery = require('./utils').registerQuery;
var toDifference = function (o) {
    if (typeof o === 'function') {
        return o.name || 'fn';
    }
    else {
        return o;
    }
};
function diffTwoObjects(expected, subject) {
    var names = Object.keys(expected);
    var diff = {};
    names.forEach(function (name) {
        if (!(name in subject)) {
            diff[name] = { missing: true, expected: expected[name] };
        }
        else {
            var actual = subject[name];
            var expectedValue = expected[name];
            // console.log({ name, actual, expectedValue })
            if (typeof expectedValue === 'function') {
                if (expectedValue(actual) === false) {
                    var predicteName = expectedValue.name;
                    diff[name] = {
                        message: "value ".concat(actual, " did not pass predicate \"").concat(predicteName, "\""),
                    };
                }
            }
            else if (!Cypress._.isEqual(actual, expectedValue)) {
                diff[name] = { actual: actual, expected: expectedValue };
            }
        }
    });
    Object.keys(subject).forEach(function (name) {
        if (!(name in expected)) {
            diff[name] = { extra: true, actual: subject[name] };
        }
    });
    return diff;
}
registerQuery('difference', function (expected) {
    var logOptions = {
        name: 'difference',
        type: 'child',
    };
    if (Array.isArray(expected)) {
        logOptions.message =
            '[' + expected.map(toDifference).join(', ') + ']';
    }
    else {
        logOptions.message = Object.entries(expected)
            .map(function (_a) {
            var k = _a[0], v = _a[1];
            return "".concat(k, ": ").concat(toDifference(v));
        })
            .join(', ');
    }
    var log = Cypress.log(logOptions);
    return function (subject) {
        var diff = {};
        if (Array.isArray(subject) && Cypress._.isPlainObject(expected)) {
            // check each item in the subject array
            // against the expected object or its predicates
            subject.forEach(function (actual, index) {
                var aDiff = diffTwoObjects(expected, actual);
                if (!Cypress._.isEmpty(aDiff)) {
                    diff[index] = aDiff;
                }
            });
        }
        else {
            var aDiff = diffTwoObjects(expected, subject);
            Object.assign(diff, aDiff);
        }
        log.set('consoleProps', function () {
            return { expected: expected, subject: subject, diff: diff };
        });
        return diff;
    };
});
