"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var validStableTypes = ['text', 'value', 'element'];
// set to console.log if you want to debug the command
var logger = Cypress._.noop;
// const logger = console.log
(0, utils_1.registerQuery)('stable', function (type, ms, options) {
    if (ms === void 0) { ms = 1000; }
    if (options === void 0) { options = { log: true }; }
    var shouldLog = 'log' in options ? options.log : true;
    // make sure this query command respects the timeout option
    var timeout = 'timeout' in options
        ? options.timeout
        : Cypress.config('defaultCommandTimeout');
    this.set('timeout', timeout);
    if (!validStableTypes.includes(type)) {
        throw new Error("unknown stable type \"".concat(type, "\""));
    }
    var log = shouldLog &&
        Cypress.log({
            name: "stable ".concat(type),
            message: "stable for ".concat(ms, "ms"),
            timeout: timeout,
        });
    logger(log);
    if (type === 'text') {
        var started_1 = null;
        var initialText_1 = null;
        var initialAt_1 = null;
        return function ($el) {
            if (initialText_1 === null) {
                started_1 = +new Date();
                initialText_1 = $el.text();
                initialAt_1 = started_1;
                logger('started with text "%s"', initialText_1);
                throw new Error('start');
            }
            if ($el.text() === initialText_1) {
                var now_1 = +new Date();
                if (now_1 - started_1 > ms) {
                    logger('after %dms stable text "%s"', now_1 - started_1, initialText_1);
                    if (shouldLog) {
                        log.set('consoleProps', function () {
                            return {
                                time: now_1 - started_1,
                                duration: now_1 - initialAt_1,
                                result: initialText_1,
                            };
                        });
                    }
                    // yield the original element
                    // so we can chain more commands and assertions
                    return $el;
                }
                else {
                    throw new Error('waiting');
                }
            }
            else {
                started_1 = +new Date();
                initialText_1 = $el.text();
                logger('text changed to "%s"', initialText_1);
                throw new Error('reset');
            }
        };
    }
    else if (type === 'value') {
        var started_2 = null;
        var initialValue_1 = null;
        var initialAt_2 = null;
        return function ($el) {
            if (initialValue_1 === null) {
                started_2 = +new Date();
                initialValue_1 = $el.val();
                initialAt_2 = started_2;
                logger('started with value %o', initialValue_1);
                throw new Error('start');
            }
            if ($el.val() === initialValue_1) {
                var now_2 = +new Date();
                if (now_2 - started_2 > ms) {
                    logger('after %dms stable val %o', now_2 - started_2, initialValue_1);
                    if (shouldLog) {
                        log.set('consoleProps', function () {
                            return {
                                time: now_2 - started_2,
                                duration: now_2 - initialAt_2,
                                result: initialValue_1,
                            };
                        });
                    }
                    // yield the original element
                    // so we can chain more commands and assertions
                    return $el;
                }
                else {
                    throw new Error('waiting');
                }
            }
            else {
                started_2 = +new Date();
                initialValue_1 = $el.val();
                logger('value changed to %o', initialValue_1);
                throw new Error('reset');
            }
        };
    }
    else if (type === 'element') {
        var started_3 = null;
        var initialElement_1 = null;
        var initialAt_3 = null;
        return function ($el) {
            if (initialElement_1 === null) {
                if ($el.length !== 1) {
                    throw new Error('Expected one element to check if stable');
                }
                started_3 = +new Date();
                initialElement_1 = $el[0];
                initialAt_3 = started_3;
                throw new Error('start');
            }
            if ($el[0] === initialElement_1) {
                var now_3 = +new Date();
                if (now_3 - started_3 > ms) {
                    logger('after %dms stable element', now_3 - started_3);
                    if (shouldLog) {
                        log.set('consoleProps', function () {
                            return {
                                time: now_3 - started_3,
                                duration: now_3 - initialAt_3,
                                result: initialElement_1,
                            };
                        });
                    }
                    // yield the original element
                    // so we can chain more commands and assertions
                    return $el;
                }
                else {
                    throw new Error('waiting');
                }
            }
            else {
                started_3 = +new Date();
                initialElement_1 = $el[0];
                logger('element changed to "%s"', initialElement_1.innerText.substring(0, 100) + '...');
                throw new Error('reset');
            }
        };
    }
});
